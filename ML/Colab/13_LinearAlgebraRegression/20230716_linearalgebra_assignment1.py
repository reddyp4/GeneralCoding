# -*- coding: utf-8 -*-
"""20230716_LinearAlgebra_Assignment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hzRvSxj6KPpkP6lJdmv3_lEVOrLcIHwV
"""



"""Q1) Write a Python function that takes a square matrix A as input and returns its eigenvalues and eigenvectors.


"""

import numpy as np

#make the matrix
B = np.mat(input("Input a square array B: "))

A = np.mat([[3,2],[1,0]])

print(A)
#Eigenvalue and Eigenvectors
eigenvalue, eigenvector = np.linalg.eig(A)
print("eigenvalue:",eigenvalue)
print("eigenvector:",eigenvector)

#Try with input
print(B)
#Eigenvalue and eigenvectors
eigenvalue1, eigenvectors1 = np.linalg.eig(B)
print("eigenvalue:",eigenvalue1)
print("eigenvector:",eigenvector1)

"""Q2) Write a program which takes 2 arrays and returns the dot product without using NumPy


"""

#Matrix1
A = [1,2,3]
B = [4,5,6]

def dot_product(A,B):
  if(len(A)!=len(B)):
    print("Cannot do dot productL")
  new=[]
  for i in range(len(A)):
    new.append(A[i]*B[i])
  return new

#get dot_product
ABDot = dot_product(A,B)
print(ABDot)

"""Now using numpy"""

dotAB_np = np.dot(A,B)
print(dotAB_np)

"""Q3) Write a Python function to calculate the determinant of a n by n matrix without using Python package


"""

#with numpy
A = [ [1,2,3], [4,5,7], [5,4,8]]
det = np.linalg.det(A)
print(det)

#To get determinant, go through each row element and calculate the

"""Q4) Write a Python function to calculate the rank of a matrix without using Python package


"""

#Lets use numpy first
rank = np.linalg.matrix_rank(A)
print("rank:",rank)