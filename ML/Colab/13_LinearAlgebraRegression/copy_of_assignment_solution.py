# -*- coding: utf-8 -*-
"""Copy of Assignment-solution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sjn482l9_IH2OUYdc9MaKrLjdNruM5pK
"""

import pandas as pd
import numpy as np

A=np.array([[2,3,4],[2,3,4],[4,5,6]])

"""##Write a Python function that takes a square matrix A as input and returns its eigenvalues and eigenvectors."""

# Solution-1

import numpy as np

def eigen_decomp(A):
    eigen_vals, eigen_vecs = np.linalg.eig(A)
    return eigen_vals, eigen_vecs

eigen_decomp(A)

"""##Write a program which takes 2 arrays and return the dot product without using numpy"""

def element_wise_product(arr1, arr2):
    if len(arr1) != len(arr2):
        return "Error: arrays must have same length"
    result = []
    for i in range(len(arr1)):
        result.append(arr1[i] * arr2[i])
    return result

arr1 = [1, 2, 3]
arr2 = [4, 5, 6]
result = element_wise_product(arr1, arr2)
print(result) # Output: [4, 10, 18]

"""#Write a python function to calculate the determinant of a n by n matrix without using python package

"""

import copy

def submatrix(a, n):
    arr = copy.deepcopy(a)
    if len(arr) == 2:
        return arr
    else:
        arr.pop(0)
        for j in arr:
            j.pop(n)

        return arr

def determinant(a):#FUNCTION TO FIND THE DETERMINANT OF A MATRIX
    if len(a) == 1:
        det = a[0]
    elif len(a) == 2:
        det = a[0][0]*a[1][1] - a[1][0]*a[0][1]
    else:
        det = 0
        for i in range(len(a[0])):
            det += ((-1)**i)*a[0][i]*determinant(submatrix(a,i))
    return det

A = [2]
B = [[1,2,4],[3,4,7],[5,6,7]]
C = [[1,2,3,4],[4,3,5,6],[8,4,2,1],[3,2,4,1]]
D = [[1,3,5,7,9],[4,6,3,7,5],[5,10,8,3,1],[1,5,3,7,6],[8,1,7,5,8]]
print("The determinant of A --> ",determinant(A))
print("The determinant of B --> ",determinant(B))
print("The determinant of C --> ",determinant(C))
print("The determinant of D --> ",determinant(D))

"""#Write a python function to calculate rank of a matrix without using python package"""

def swapRows(a,row1,row2):
    a[row2],a[row1]=a[row1],a[row2]
    return a

def Row_Transformation(a,x,row1,row2):
    for i in range(len(a[row2])):
                a[row2][i]+=a[row1][i]*x
    return a

def MatrixRank(a):

    ncol=len(a[0])
    nrow=len(a)
    rank=min(ncol,nrow)

    if nrow>ncol:
        b=[]
        for m in range(ncol):
            l=[]
            for n in range(nrow):
                l.append(a[n][m])
            b.append(l)
        a=b
        ncol,nrow=nrow,ncol

    for r in range(rank):
        if a[r][r]!=0:
            for j in range(r+1,nrow):
                a=Row_Transformation(a,-(a[j][r]//a[r][r]),r,j)
        else:
            count1=True
            for k in range(r+1,nrow):
                if a[k][r]!=0:
                    a=swapRows(a,r,k)
                    count1=False
                    break

            if count1:
                for i in range(nrow):
                    a[i][r],a[i][rank-1]=a[i][rank-1],a[i][r]
            nrow-=1


        count2=0
        for i in a:
            if i==[0]*ncol:
                count2+=1

        return (rank-count2)

array = [[10,20,10],
        [20,40,20],
        [30,50,0]]

MatrixRank(array)

